Release,Track No#,Song Title,Artist,Rep Count,Duration,Genre,Hard?,Easy to Learn?,Tags,,,,,,,,Release,Track No#,Song Title,Artist,Rep Count,Duration,Genre,Hard?
89,1 - Warmup,Not Alone,Dane Rumble feat. Jupiter Project,87,4:38,Pop,,,,,,,,,,,,,,,,,,
89,2 - Squats,Raise Those Hands,R3Hab & Bassjackers,128,5:41,EDM,,,New Year's Eve,,,,,,,,,,,,,,,
89,3 - Chest,Where Did the Party Go,Fall Out Boy,94,5:06,Rock,,,"Emo, New Year's Eve",,,,,,,,,,,,,,,
89,4 - Back,Me & You,Nero,104,5:25,EDM,,,,,,,,,,,,,,,,,,
89,5 - Triceps,Applause,Lady Gaga,95,4:35,Pop,,,"Women of Pop, Sing-Along",,,,,,,,,,,,,,,
89,6 - Biceps,When You Were Young,The Killers,101,5:22,Rock,,,Sing-Along,,,,,,,,,,,,,,,
89,7 - Lunges,Burn,Ellie Goulding,100,5:34,Pop,,,"Women of Pop, Sing-Along, Summer",,,,,,,,,,,,,,,
89,8 - Shoulders,True Hardstyler (Silver Nikan Radio Edit),Brooklyn Bounce & DJ Zealot,125,5:29,EDM,,,,,,,,,,,,,,,,,,
89,9 - Core,La La La,Naughty Boy feat. Sam Smith,58,3:44,Pop,,,,,,,,,,,,,,,,,,
89,10 - Cooldown,Radioactive,Imagine Dragons,0,3:56,Rock,,,"Sing-Along, Halloween",,,,,,,,,,,,,,,
90,1 - Warmup,You Make Me,Avicii,92,5:20,Rock,,,Sing-Along,,,,,,,,,,,,,,,
90,2 - Squats,What Now,Rihanna,134,5:51,Hip-Hop,,,Women of Pop,,,,,,,,,,,,,,,
90,3 - Chest,Conquistador,Thirty Seconds to Mars,108,5:29,Rock,,,"Emo, Beast Mode",,,,,,,,,,,,,,,
90,4 - Back,Promises,Nero,118,5:45,EDM,,,,,,,,,,,,,,,,,,
90,5 - Triceps,Walk of Shame,P!nk,94,4:18,Pop,,,"P!nk, Women of Pop",,,,,,,,,,,,,,,
90,6 - Biceps,Miss Jackson,Panic! at the Disco feat. Loco,106,3:59,Rock,,,"Emo, Break-Up Songs",,,,,,,,,,,,,,,
90,7 - Lunges,Stay the Night,Zedd feat. Hayley Williams,128,5:20,Pop,,,,,,,,,,,,,,,,,,
90,8 - Shoulders,Thumbs Up (For Rock N Roll) Kill The Noise Remix,Kill the Noise and Feed Me,113,4:37,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
90,9 - Core,Something I Need,OneRepublic,126,4:06,Pop,Hard,,Hard,,,,,,,,,,,,,,,
90,10 - Cooldown,How You Remind Me,Nickelback,0,4:07,Rock,,,Break-Up Songs,,,,,,,,,,,,,,,
90,6 - Biceps,Everybody Bring It,Ronnie Fi'nesse,128,4:58,Hip-Hop,,,,,,,,,,,,,,,,,,
90,5 - Triceps,Put Your Hands Up,Stevie V feat. III Youth,82,5:15,EDM,,,,,,,,,,,,,,,,,,
91,1 - Warmup,Ten Feet Tall,Wrabel,81,5:04,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
91,2 - Squats,Somebody Told Me,The Killers,135,5:09,Rock,,,"Emo, Sing-Along",,,,,,,,,,,,,,,
91,3 - Chest,Goodness Gracious,Ellie Goulding,124,5:52,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
91,4 - Back,Beautiful Life (Remix),Armin Van Buuren,78,5:41,EDM,,,,,,,,,,,,,,,,,,
91,5 - Triceps,Hey Brother,Avicii,136,5:18,EDM,,,,,,,,,,,,,,,,,,
91,6 - Biceps,Bad Company,Five Finger Death Punch,93,5:13,Rock,,,,,,,,,,,,,,,,,,
91,7 - Lunges,Find You,Zedd,131,5:31,EDM,,,,,,,,,,,,,,,,,,
91,8 - Shoulders,"Eat, Sleep, Rave, Repeat (Remix)",Fatboy Slim,81,5:08,EDM,,,New Year's Eve,,,,,,,,,,,,,,,
91,9 - Core,Trumpets,Jason Derulo,44,3:42,Pop,,,,,,,,,,,,,,,,,,
91,10 - Cooldown,Burning Bridges,OneRepublic,0,4:23,Pop,,,,,,,,,,,,,,,,,,
91,9 - Core,Hold On,Colbie Caillat,60,3:39,Pop,,,"Women of Pop, Positive Vibes",,,,,,,,,,,,,,,
92,1 - Warmup,All We Need Is Love,Ricki-Lee,91,5:16,Pop,,,"Valentine's Day, Positive Vibes",,,,,,,,,,,,,,,
92,2 - Squats,GO!,Autoerotique vs Marc Noir,124,5:29,EDM,,,,,,,,,,,,,,,,,,
92,3 - Chest,The Phoenix,Fall Out Boy,124,5:33,Rock,,,Emo,,,,,,,,,,,,,,,
92,4 - Back,Letting Go (LTN Radio Edit),BT Fractal & JES,66,5:35,EDM,,,,,,,,,,,,,,,,,,
92,5 - Triceps,Problem,Ariana Grande feat. Iggy Azalea,95,4:03,Pop,,,"Women of Pop, Break-Up Songs, Positive Vibes",,,,,,,,,,,,,,,
92,6 - Biceps,Come With Me Now,KONGOS,84,4:34,Rock,,,Easy to Learn,,,,,,,,,,,,,,,
92,7 - Lunges,NRG,Guiltless Happy,155,5:30,EDM,,,,,,,,,,,,,,,,,,
92,8 - Shoulders,Ping Pong (Radio Edit),Armin Van Buuren,101,5:15,EDM,,,,,,,,,,,,,,,,,,
92,9 - Core,Fancy,Iggy Azalea feat. Charli XCX,54,4:20,Pop,,,"Women of Pop, Sing-Along",,,,,,,,,,,,,,,
92,10 - Cooldown,Chandelier,Sia,0,3:40,Pop,,,"Women of Pop, Sing-Along, New Year's Eve",,,,,,,,,,,,,,,
92,4 - Back,Dream & Dance,DJ Paffendorf vs Ryan T,92,5:38,EDM,,,New Year's Eve,,,,,,,,,,,,,,,
92,9 - Core,Love Runs Out,OneRepublic,48,3:50,Pop,,,"Sing-Along, Valentine's Day",,,,,,,,,,,,,,,
93,1 - Warmup,Break Free,Ariana Grande feat. Zedd,95,5:00,Pop,,,"Women of Pop, Positive Vibes, Break-Up Songs",,,,,,,,,,,,,,,
93,2 - Squats,Booyah (Lucky Date Remix),Showtek feat. We are Loud & Sonny Wilson,95,5:37,EDM,,,,,,,,,,,,,,,,,,
93,3 - Chest,Kings And Queens,Thirty Seconds To Mars,75,5:34,Rock,,,Emo,,,,,,,,,,,,,,,
93,4 - Back,Here Tonight (Carita La Nina Radio Edit),Dash Berlin & Jay Cosmic feat. Colin McLoughlin,78,5:11,EDM,,Easy to Learn,"New Year's Eve, Easy to Learn",,,,,,,,,,,,,,,
93,5 - Triceps,Bang Bang,"Jessie J, Ariana Grande, & Nicki Minaj",116,4:56,Pop,Hard,,"Women of Pop, Hard",,,,,,,,,,,,,,,
93,6 - Biceps,Centuries,Fall Out Boy,144,4:56,Rock,,,Emo,,,,,,,,,,,,,,,
93,7 - Lunges,1941,Klayplex feat. Virian,121,5:27,EDM,Hard,,"New Year's Eve, Hard",,,,,,,,,,,,,,,
93,8 - Shoulders,Twisted (Eptic Remix),Fedde le Grand,112,5:37,EDM,,,,,,,,,,,,,,,,,,
93,9 - Core,All About That Bass,Meghan Trainor,136,4:54,Pop,,,Women of Pop,,,,,,,,,,,,,,,
93,10 - Cooldown,What Are You Waiting For?,Nickelback,0,3:45,Rock,,,,,,,,,,,,,,,,,,
93,3 - Chest,Fight On,Jean-Paul Parks,116,5:25,Pop,,,,,,,,,,,,,,,,,,
93,5 - Triceps,Animal,Neon Trees,96,4:36,EDM,,,,,,,,,,,,,,,,,,
94,1 - Warmup,Heroes (We Could Be),Alesso feat. Tove Lo,104,5:31,EDM,Hard,,"Positive Vibes, Hard",,,,,,,,,,,,,,,
94,2 - Squats,Everybody Go!,Vice,60,5:36,EDM,,,,,,,,,,,,,,,,,,
94,3 - Chest,Burnin' Up,Jessie J feat. 2 Chainz,146,5:34,Pop,,,"Women of Pop, Summer",,,,,,,,,,,,,,,
94,4 - Back,Today (Scooter Remix),Scooter & Vassy,72,5:29,EDM,,,,,,,,,,,,,,,,,,
94,5 - Triceps,Lips Are Movin,Meghan Trainor,127,4:43,Pop,,,"Women of Pop, Break-Up Songs",,,,,,,,,,,,,,,
94,6 - Biceps,Get 'Em Up,Nickelback,142,4:57,Rock,,,,,,,,,,,,,,,,,,
94,7 - Lunges,We Make It Bounce,Dillon Francis feat. Major Lazer & Stylo G,178,5:25,EDM,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
94,8 - Shoulders,This Is How It Goes,Zylent feat. Katatonic,102,5:40,Pop,,,,,,,,,,,,,,,,,,
94,9 - Core,Baby Don't Lie,Gwen Stefani,68,4:22,Pop,,,Women of Pop,,,,,,,,,,,,,,,
94,10 - Cooldown,Only Love Can Hurt Like This,Paloma Faith,0,4:18,Pop,,,Women of Pop,,,,,,,,,,,,,,,
94,6 - Biceps,I Bet My Life,Imagine Dragons,71,4:13,Rock,,,,,,,,,,,,,,,,,,
95,1 - Warmup,Outside,Calvin Harris feat. Ellie Goulding,85,4:48,Pop,Hard,,"Women of Pop, Summer, Hard",,,,,,,,,,,,,,,
95,2 - Squats,Bukem,Autoerotique & 4B,85,5:13,EDM,,,,,,,,,,,,,,,,,,
95,3 - Chest,Uptown Funk,Mark Ronson feat. Bruno Mars,177,6:06,Pop,,,"Sing-Along, Summer",,,,,,,,,,,,,,,
95,4 - Back,Beautiful World (Radio Edit),Blasterjaxx & DBSTF feat. Ryder,93,5:23,EDM,,,,,,,,,,,,,,,,,,
95,5 - Triceps,Irresistible,Fall Out Boy,129,4:18,Rock,,,"Emo, Easy to Learn",,,,,,,,,,,,,,,
95,6 - Biceps,GDFR,Flo Rida feat. Sage The Gemini & Lookas,154,4:25,Hip-Hop,,,,,,,,,,,,,,,,,,
95,7 - Lunges,Burnin,Calvin Harris & R3Hab,154,6:02,EDM,Hard,,"Summer, Hard, Beast Mode",,,,,,,,,,,,,,,
95,8 - Shoulders,I Am Machine,Three Days Grace,101,5:17,Rock,,,Beast Mode,,,,,,,,,,,,,,,
95,9 - Core,Sugar,Maroon 5,91,3:59,Pop,,,"Sing-Along, Halloween",,,,,,,,,,,,,,,
95,10 - Cooldown,Brother,NEEDTOBREATHE feat. Gavin DeGraw,0,3:33,Pop,,,,,,,,,,,,,,,,,,
96,1 - Warmup,Five More Hours,Deorro X Chris Brown,94,5:29,Hip-Hop,,,"Sing-Along, New Year's Eve",,,,,,,,,,,,,,,
96,2 - Squats,Blow Your Mind,Tiesto & MOTI,122,6:12,EDM,Hard,,Hard,,,,,,,,,,,,,,,
96,3 - Chest,Immortals,Along Pointless,137,6:08,Rock,,,Emo,,,,,,,,,,,,,,,
96,4 - Back,The Thrill,Nero,105,5:29,EDM,,,,,,,,,,,,,,,,,,
96,5 - Triceps,Hallelujah,Panic! at the Disco,101,4:16,Rock,,,Emo,,,,,,,,,,,,,,,
96,6 - Biceps,Wobble,Flo Rida,158,4:30,Hip-Hop,,,Valentine's Day,,,,,,,,,,,,,,,
96,7 - Lunges,Peanut Butter Jelly,Galantis,172,5:21,EDM,,,,,,,,,,,,,,,,,,
96,8 - Shoulders,Addicted To A Memory,Zedd Feat. Bahari,126,6:06,EDM,Hard,,Hard,,,,,,,,,,,,,,,
96,9 - Core,Want To Want Me,Jason Derulo,89,3:32,Pop,,,,,,,,,,,,,,,,,,
96,10 - Cooldown,Adore,Cashmire Cat Feat. Ariana Grande,0,3:41,Pop,,,Women of Pop,,,,,,,,,,,,,,,
97,1 - Warmup,Scars,Alesso Feat Ryan Tedder,80,5:02,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
97,2 - Squats,Derp,Bassjackers & MAKJ,122,6:17,EDM,,,,,,,,,,,,,,,,,,
97,3 - Chest,Generation Day,Godsmack,135,6:05,Rock,,,Beast Mode,,,,,,,,,,,,,,,
97,4 - Back,Dark Skies,Nero,80,5:49,EDM,,,Halloween,,,,,,,,,,,,,,,
97,5 - Triceps,Waiting For Love,Avicii,157,5:33,EDM,Hard,,"Sing-Along, Valentine's Day, Hard",,,,,,,,,,,,,,,
97,6 - Biceps,We Don't Run,Bon Jovi,148,4:39,Rock,,,Sing-Along,,,,,,,,,,,,,,,
97,7 - Lunges,How Deep Is Your Love,Calvin Harris,171,5:46,EDM,,,Valentine's Day,,,,,,,,,,,,,,,
97,8 - Shoulders,Bumble Bee,Zedd & Botnek,119,5:50,EDM,,,Summer,,,,,,,,,,,,,,,
97,9 - Core,Young & Stupid,Travis Mills,55,3:05,Pop,,Easy to Learn,"New Year's Eve, Easy to Learn",,,,,,,,,,,,,,,
97,10 - Cooldown,Purple,Six60,0,3:48,Pop,,,,,,,,,,,,,,,,,,
97,4 - Back,Underworld,Alloy Dreams,80,5:58,EDM,,,,,,,,,,,,,,,,,,
98,1 - Warmup,Strong Ones,Armin Van Buuren,90,5:06,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
98,2 - Squats,Techno,Vinal,124,5:29,EDM,,,,,,,,,,,,,,,,,,
98,3 - Chest,Focus,Ariana Grande,146,5:58,Pop,Hard,,"Women of Pop, Hard",,,,,,,,,,,,,,,
98,4 - Back,Chased,Andrew Rayel & Mark Sixma,88,5:30,EDM,,,,,,,,,,,,,,,,,,
98,5 - Triceps,Two Minds,Nero,137,5:32,EDM,,,Break-Up Songs,,,,,,,,,,,,,,,
98,6 - Biceps,Victorious,Panic! At The Disco,96,4:34,Rock,,,"Emo, New Year's Eve",,,,,,,,,,,,,,,
98,7 - Lunges,Memories,KSHMR,154,5:28,EDM,,,Halloween,,,,,,,,,,,,,,,
98,8 - Shoulders,Redliner,Nick Skitz,152,5:27,EDM,Hard,,Hard,,,,,,,,,,,,,,,
98,9 - Core,My House,Flo Rida,82,4:08,Hip-Hop,,,"New Year's Eve, Positive Vibes",,,,,,,,,,,,,,,
98,10 - Cooldown,Bird Set Free,Sia,0,4:18,Pop,,,"Easy to Learn, Women of Pop, Positive Vibes",,,,,,,,,,,,,,,
99,1 - Warmup,Mad World,Hardwell Feat. Jake Reese,98,5:29,EDM,,,,,,,,,,,,,,,,,,
99,2 - Squats,Power Glove,Knife Party,138,6:00,EDM,,,,,,,,,,,,,,,,,,
99,3 - Chest,In The Dark,3 Doors Down,144,6:08,Rock,Hard,,Hard,,,,,,,,,,,,,,,
99,4 - Back,Winterburn,Andrew Rayel & Digital X Feat. Sylvia Tosun,80,6:11,EDM,,,,,,,,,,,,,,,,,,
99,5 - Triceps,Something in the Way You Move,Ellie Goulding,112,4:51,Pop,,,"Positive Vibes, Women of Pop, Valentine's Day",,,,,,,,,,,,,,,
99,6 - Biceps,Emperor's New Clothes,Panic! At The Disco,99,4:16,Rock,,,"Emo, Halloween",,,,,,,,,,,,,,,
99,7 - Lunges,Won't Stop Rocking,R3Hab & Headhunters,148,5:30,EDM,,,,,,,,,,,,,,,,,,
99,8 - Shoulders,Old Skool,Armin Van Buuren,111,5:14,EDM,,,,,,,,,,,,,,,,,,
99,9 - Core,Work,Rihanna feat. Drake,117,3:39,Hip-Hop,Hard,,"Women of Pop, Hard",,,,,,,,,,,,,,,
99,10 - Cooldown,Torches,Daughtry,0,3:35,Rock,,,,,,,,,,,,,,,,,,
100,1 - Warmup,This Is What You Came For,Calvin Harris & Rihanna,106,5:58,Pop,,,"Women of Pop, Sing-Along",,,,,,,,,,,,,,,
100,2 - Squats,Kraken,Knife Party,149,6:14,EDM,,,Beast Mode,,,,,,,,,,,,,,,
100,3 - Chest,Bad Man,"Pitbull Feat. Robin Thick, Joe Perry & Travis Barker",185,5:44,Latin,,,,,,,,,,,,,,,,,,
100,4 - Back,Creation,Seven Lions feat Vok,102,6:11,EDM,,,,,,,,,,,,,,,,,,
100,5 - Triceps,Me Too,Meghan Trainor,71,4:52,Pop,,,Women of Pop,,,,,,,,,,,,,,,
100,6 - Biceps,Who's With Me,Flo Rida,136,5:20,Hip-Hop,,,,,,,,,,,,,,,,,,
100,7 - Lunges,No Money,Galantis,138,5:36,EDM,,,,,,,,,,,,,,,,,,
100,8 - Shoulders,NRG,Chase & Status feat Novelist,115,6:10,EDM,,,,,,,,,,,,,,,,,,
100,9 - Core,Wherever I Go,OneRepublic,57,3:57,Pop,,,,,,,,,,,,,,,,,,
100,10 - Cooldown,Just Like Fire,P!nk,0,3:40,Pop,,,"P!nk, Summer, Women of Pop, Positive Vibes",,,,,,,,,,,,,,,
100,4 - Back,Turn Up,The Heavy,90,5:15,Rock,,,Sing-Along,,,,,,,,,,,,,,,
100,7 - Lunges,Bailar,Deorro Feat Elvis Crespo,158,5:22,Latin,,,,,,,,,,,,,,,,,,
100,8 - Shoulders,Tic Tic Tic,Dada Life feat Lizzy Hale,102,5:23,Rock,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
100,2 - Squats,Feel Your Love,Dannic & Sick Individuals,138,5:57,EDM,,,Valentine's Day,,,,,,,,,,,,,,,
101,1 - Warmup,Run Wild,Hardwell Feat. Jake Reese,104,5:47,EDM,,,"Halloween, Beast Mode",,,,,,,,,,,,,,,
101,2 - Squats,Go! (Vincent Price Remix),Wolfpack & Avancada,184,5:56,EDM,,,,,,,,,,,,,,,,,,
101,3 - Chest,Spoken Word,Chase & Status feat George The Poet,132,5:10,Pop,,,,,,,,,,,,,,,,,,
101,4 - Back,LRAD,Knife Party,90,5:43,EDM,Hard,,Hard,,,,,,,,,,,,,,,
101,5 - Triceps,Friday,PARRI$,140,5:31,Pop,Hard,,Hard,,,,,,,,,,,,,,,
101,6 - Biceps,Jungle Youth,Young The Giant,124,5:43,Rock,,,,,,,,,,,,,,,,,,
101,7 - Lunges,Ocho Cinco,DJ Snake feat. Yellow Claw,131,5:23,EDM,,,Beast Mode,,,,,,,,,,,,,,,
101,8 - Shoulders,Feel Your Love,Flux Pavilion & NGHTMRE feat Jamie Lewis,148,5:55,EDM,,,Valentine's Day,,,,,,,,,,,,,,,
101,9 - Core,Closer,The Chainsmokers feat Halsey,76,4:55,Pop,,,Sing-Along,,,,,,,,,,,,,,,
101,10 - Cooldown,Love On The Brain,Rihanna,0,3:47,Hip-Hop,,,"Women of Pop, Valentine's Day",,,,,,,,,,,,,,,
102,1 - Warmup,Used To Have It All,Fais & Afrojack,93,5:10,EDM,,,Break-Up Songs,,,,,,,,,,,,,,,
102,2 - Squats,Find Me,Sigma feat. Birdy,122,5:14,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
102,3 - Chest,Sweet Lovin',Sigala,138,5:02,Pop,,,"Valentine's Day, Positive Vibes",,,,,,,,,,,,,,,
102,4 - Back,Blame,Zeds Dead & Diplo feat Elliphant,98,5:36,Pop,,,,,,,,,,,,,,,,,,
102,5 - Triceps,Drum,Something In The Water,122,5:08,Pop,,,,,,,,,,,,,,,,,,
102,6 - Biceps,All The Way Up,"Fat Joe, Remy Mar, David Guetta",130,5:05,Hip-Hop,,,"Easy to Learn, Beast Mode",,,,,,,,,,,,,,,
102,7 - Lunges,Lost & Found,Borgeous & 7 Skies,188,5:15,EDM,,,,,,,,,,,,,,,,,,
102,8 - Shoulders,Feel It,GTA & What So Not,174,5:44,Pop,Hard,,Hard,,,,,,,,,,,,,,,
102,9 - Core,Starboy,The Weeknd feat Daft Punk,84,3:56,Hip-Hop,,,Sing-Along,,,,,,,,,,,,,,,
102,10 - Cooldown,Capsize,Frenship & Emily Warren,0,4:03,Pop,,,,,,,,,,,,,,,,,,
103,1 - Warmup,Places,Martin Solveig feat. Ina Wroldsen,84,5:08,EDM,,,,,,,,,,,,,,,,,,
103,2 - Squats,Here Comes the Sun,Will K feat. Sean Declase,128,5:24,EDM,,,Summer,,,,,,,,,,,,,,,
103,3 - Chest,Believer,Imagine Dragons,118,5:13,Rock,,,"Sing-Along, Positive Vibes",,,,,,,,,,,,,,,
103,4 - Back,I Need You,Armin Van Buuren feat. Olaf Blackwood,98,6:19,EDM,,,,,,,,,,,,,,,,,,
103,5 - Triceps,Come Get It Bae,Pharrell Williams,80,4:41,Hip-Hop,Hard,,Hard,,,,,,,,,,,,,,,
103,6 - Biceps,Let Me Love You,DJ Snake & Justin Bieber,89,4:20,Pop,,,"Sing-Along, Valentine's Day",,,,,,,,,,,,,,,
103,7 - Lunges,ILYSM,Steve Aoki & Autoerotique,188,6:33,EDM,Hard,,Hard,,,,,,,,,,,,,,,
103,8 - Shoulders,Paris,The Chainsmokers,110,5:35,Pop,,Easy to Learn,"Valentine's Day, Easy to Learn",,,,,,,,,,,,,,,
103,9 - Core,I Love You,Axwell/\ngrosso feat. Kid Ink,72,3:15,EDM,,,Valentine's Day,,,,,,,,,,,,,,,
103,10 - Cooldown,1 Night,Mura Masa feat. Charlie XCX ,0,3:31,Pop,,,,,,,,,,,,,,,,,,
104,1 - Warmup,More Than You Know,Axwell/\Ingrosso,77,5:10,Pop,,,,,,,,,,,,,,,,,,
104,2 - Squats,Black Rose,BlasterJaxx feat. Jonathan Mendelsohn,136,6:10,EDM,,,"Halloween, Beast Mode",,,,,,,,,,,,,,,
104,3 - Chest,Young And Menace,Fall Out Boy,110,5:34,Rock,,,"Emo, Beast Mode",,,,,,,,,,,,,,,
104,4 - Back,Ain’t Giving Up (WiDE AWAKE Remix),Craig David & Sigala,102,5:15,EDM,,,"Valentine's Day, Positive Vibes",,,,,,,,,,,,,,,
104,5 - Triceps,Touch,Little Mix,109,4:21,Pop,,,"Women of Pop, Valentine's Day",,,,,,,,,,,,,,,
104,6 - Biceps,Back Again,Flosstradamus & Mayhem feat. Waka Flocka Flame,108,5:14,Hip-Hop,,,Valentine's Day,,,,,,,,,,,,,,,
104,7 - Lunges,Rise and Shine,Deorro,161,4:51,EDM,,,Summer,,,,,,,,,,,,,,,
104,8 - Shoulders,Into Dust,Paris Blohm feat. Elle Vee,128,5:34,EDM,,,,,,,,,,,,,,,,,,
104,9 - Core,No Vacancy,OneRepublic,92,3:48,Pop,,,,,,,,,,,,,,,,,,
104,10 - Cooldown,Quit,Cashmere Cat feat. Ariana Grande,0,4:23,Pop,,,Women of Pop,,,,,,,,,,,,,,,
105,1 - Warmup,All Stars,Martin Solveig feat. Alma,78,5:21,Pop,,,"Summer, Positive Vibes",,,,,,,,,,,,,,,
105,2 - Squats,Do Or Die,Blasterjaxx feat. Lara,130,5:40,EDM,,,"Halloween, New Year's Eve",,,,,,,,,,,,,,,
105,3 - Chest,The Man,The Killers,122,5:25,Rock,,,,,,,,,,,,,,,,,,
105,4 - Back,Stay For It,RL Grime feat. Miguel,88,6:12,EDM,,,Sing-Along,,,,,,,,,,,,,,,
105,5 - Triceps,What About Us,P!nk,133,5:34,Pop,,,"P!nk, Women of Pop, Break-Up Songs",,,,,,,,,,,,,,,
105,6 - Biceps,Champion,Fall Out Boy,129,4:55,Rock,,,"Emo, Positive Vibes",,,,,,,,,,,,,,,
105,7 - Lunges,How Do You Feel Right Now,Axwell/\Ingrosso,236,5:47,Pop,Hard,,Hard,,,,,,,,,,,,,,,
105,8 - Shoulders,Lean Back (NGHTMRE Remix),Terror Squad,123,4:49,Hip-Hop,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
105,9 - Core,Sweat,The All American Rejects,84,3:09,Rock,,,"Emo, Summer",,,,,,,,,,,,,,,
105,10 - Cooldown,Break My Habits,Topic,0,2:57,Pop,,,,,,,,,,,,,,,,,,
106,1 - Warmup,Still The One,Kill The Buzz & Hardwell feat. Max Collins,76,5:06,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
106,2 - Squats,I Am Here,P!nk,122,5:21,Pop,,,"P!nk, Women of Pop, Positive Vibes",,,,,,,,,,,,,,,
106,3 - Chest,Little Thing Gone Wild,Black Rebel Motorcycle Club,126,5:30,Rock,,,Beast Mode,,,,,,,,,,,,,,,
106,4 - Back,Say Less,Dillon Francis feat. G-Eazy,130,5:39,EDM,Hard,,"Hard, Beast Mode",,,,,,,,,,,,,,,
106,5 - Triceps,Tell Me You Love Me,Galantis & Throttle,117,4:59,Pop,,,Valentine's Day,,,,,,,,,,,,,,,
106,6 - Biceps,Walk On Water,Thirty Seconds To Mars,124,5:10,Rock,,,"Emo, Positive Vibes",,,,,,,,,,,,,,,
106,7 - Lunges,Coco's Miracle (Club Mix),Fedde le Grand & Dannic vs Coco Star,268,6:05,EDM,Hard,,Hard,,,,,,,,,,,,,,,
106,8 - Shoulders,Tribes,Chase & Status,174,4:54,Hip-Hop,,,"Halloween, Beast Mode",,,,,,,,,,,,,,,
106,9 - Core,Revenge,P!nk feat. Eminem,97,3:50,Rock,,,"P!nk, Women of Pop",,,,,,,,,,,,,,,
106,10 - Cooldown,Stargazing,Kygo feat. Justin Jesso,0,4:01,Pop,,,Summer,,,,,,,,,,,,,,,
107,1 - Warmup,Lullaby,Sigala & Paloma Faith,86,5:13,Pop,,,,,,,,,,,,,,,,,,
107,2 - Squats,Dreamer (Matisse & Sadko Remix,Axwell/\Ingrosso,140,6:13,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
107,3 - Chest,Dangerous Night,Thirty Seconds To Mars,136,5:29,Rock,,,"Emo, Halloween",,,,,,,,,,,,,,,
107,4 - Back,BOOM,Tiesto & Sevenn feat. Gucci Mane,102,5:38,Hip-Hop,,,,,,,,,,,,,,,,,,
107,5 - Triceps,No Excuses,Meghan Trainor,132,4:58,Pop,,,"Women of Pop, Break-Up Songs",,,,,,,,,,,,,,,
107,6 - Biceps,Church,Fall Out Boy,118,5:02,Rock,,,"Emo, Easy to Learn",,,,,,,,,,,,,,,
107,7 - Lunges,Going Mad,Paces feat. CLYPSO & Raven Felix,214,5:41,EDM,Hard,,"Halloween, Hard",,,,,,,,,,,,,,,
107,8 - Shoulders,We Want Your Soul (Rob & Jack Remix),Dada Life,126,5:33,EDM,,,Halloween,,,,,,,,,,,,,,,
107,9 - Core,2 Da Moon,"Towkio feat. Teddy Jackson, Grace Webber",62,2:54,Hip-Hop,,,Halloween,,,,,,,,,,,,,,,
107,10 - Cooldown,Miss You (NVOY Remix),Young France,0,3:10,EDM,,,,,,,,,,,,,,,,,,
107,4 - Back,I Bet You Wanna,Gnome,102,5:38,EDM,,,,,,,,,,,,,,,,,,
108,1 - Warmup,Panic Room,Au/Ra & CamelPhat,82,5:33,EDM,,,Halloween,,,,,,,,,,,,,,,
108,2 - Squats,Pump It Up,"Nari, Pain, Tava & Luciana",146,5:43,EDM,,,"New Year's Eve, Positive Vibes",,,,,,,,,,,,,,,
108,3 - Chest,Great Wide Open,Thirty Seconds To Mars,72,6:02,Rock,,,Emo,,,,,,,,,,,,,,,
108,4 - Back,Therapy,Armin Van Buuren feat. James Newman,97,6:15,EDM,,,,,,,,,,,,,,,,,,
108,5 - Triceps,Say Amen,Panic! At The Disco,146,5:21,Rock,Hard,,"Emo, Hard",,,,,,,,,,,,,,,
108,6 - Biceps,Make It Rain,Fat Joe & Lil Wayne,147,4:54,Hip-Hop,,,,,,,,,,,,,,,,,,
108,7 - Lunges,Ready For It,Camada feat. Tribes,142,5:04,EDM,,,,,,,,,,,,,,,,,,
108,8 - Shoulders,Boomshakalaka,MR.BLACK & Diego Miranda feat. The Kemist,86,5:40,Hip-Hop,,,"Hard, Beast Mode",,,,,,,,,,,,,,,
108,9 - Core,Let You Be Right,Meghan Trainor,64,3:57,Pop,,,"Women of Pop, Break-Up Songs",,,,,,,,,,,,,,,
108,10 - Cooldown,Remind Me To Forget,Kygo & Miguel,0,3:42,Pop,,,Break-Up Songs,,,,,,,,,,,,,,,
109,1 - Warmup,Jackie Chan,Tiesto & Dzeko Feat. Preme & Post Malone,92,5:38,EDM,,,,,,,,,,,,,,,,,,
109,2 - Squats,Natural,Imagine Dragons,146,6:25,Rock,Hard,,"Sing-Along, Hard",,,,,,,,,,,,,,,
109,3 - Chest,Satisfied,Galantis feat. Max,104,5:22,EDM,,,Sing-Along,,,,,,,,,,,,,,,
109,4 - Back,The Island Pt.1 (Dawn) [Skrillex Remix),Pendulum,114,5:48,EDM,,,Summer,,,,,,,,,,,,,,,
109,5 - Triceps,I Like It,Cardi B,144,5:08,Hip-Hop,Hard,,"Sing-Along, Hard",,,,,,,,,,,,,,,
109,6 - Biceps,Shadowboxer,Good Charlotte,118,4:59,Rock,,,Emo,,,,,,,,,,,,,,,
109,7 - Lunges,The In Between,Elephante feat. Anjulie,176,5:40,EDM,,,,,,,,,,,,,,,,,,
109,8 - Shoulders,Blah Blah Blah,Armin Van Buuren,120,5:29,EDM,Hard,,Hard,,,,,,,,,,,,,,,
109,9 - Core,Complicated,Mura Masa & NAO,65,3:44,Pop,,,,,,,,,,,,,,,,,,
109,10 - Cooldown,Deep End,Daughtry,0,3:59,Rock,,,,,,,,,,,,,,,,,,
110,1 - Warmup,I Need,Wilkinson feat. Hayla,111,5:13,EDM,,,"Valentine's Day, Easy to Learn",,,,,,,,,,,,,,,
110,2 - Squats,Wild Wild Son (Club Mix),Armin Van Buuren feat. Sam Martin,109,5:41,EDM,,,,,,,,,,,,,,,,,,
110,3 - Chest,Heads Up,JAIN,75,4:54,Pop,,,,,,,,,,,,,,,,,,
110,4 - Back,First Time,"Seven Lions, SLANDER & Dabin feat. Dylan Matthew",131,6:23,Pop,,,Valentine's Day,,,,,,,,,,,,,,,
110,5 - Triceps,Woman Like Me,Little Mix feat. Nicki Minaj,135,5:35,Pop,,,Women of Pop,,,,,,,,,,,,,,,
110,6 - Biceps,Machine,Imagine Dragons,149,5:12,Rock,Hard,,Hard,,,,,,,,,,,,,,,
110,7 - Lunges,Buscando,GTA & Jenn Morel,172,6:00,Latin,,,,,,,,,,,,,,,,,,
110,8 - Shoulders,Losing It,FISHER,122,5:42,EDM,,,,,,,,,,,,,,,,,,
110,9 - Core,Taki Taki,"DJ Snake feat. Selena Gomez, Ozuna & Cardi B",104,3:42,Latin,,,Women of Pop,,,,,,,,,,,,,,,
110,10 - Cooldown,Want To,Dua Lipa,0,3:42,Pop,,,Women of Pop,,,,,,,,,,,,,,,
110,9 - Core,"1, 2, 2003",Liberty Woes,66,3:20,Hip-Hop,,,,,,,,,,,,,,,,,,
111,1 - Warmup,Speechless (Nicolas Haelg Remix),Robin Schulz feat. Erika Sirola,88,5:14,EDM,,,Valentine's Day,,,,,,,,,,,,,,,
111,2 - Squats,Chase The Sun (Extended Mix),Hardwell & Dannic feat. Keli- Leigh,121,5:44,EDM,,,Summer,,,,,,,,,,,,,,,
111,3 - Chest,Youngblood,5 Seconds Of Summer,107,5:38,Rock,,,"Emo, Halloween",,,,,,,,,,,,,,,
111,4 - Back,Reserve,Egzod feat. Leo The Kind,106,5:43,Rock,Hard,,"Positive Vibes, Beast Mode, Hard",,,,,,,,,,,,,,,
111,5 - Triceps,High Hopes,Panic! At The Disco,174,5:49,Rock,Hard,,"Emo, Hard",,,,,,,,,,,,,,,
111,6 - Biceps,Walk Me Home,P!nk,115,4:38,Pop,,,"P!nk, Women of Pop",,,,,,,,,,,,,,,
111,7 - Lunges,Face My Fears,Upside Below,204,6:01,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
111,8 - Shoulders,Focus,Deorro feat. Lena Leon,129,5:44,EDM,,,,,,,,,,,,,,,,,,
111,9 - Core,FOOLISH,Meghan Trainor,100,3:24,Pop,,,Women of Pop,,,,,,,,,,,,,,,
111,10 - Cooldown,Imagine,Ariana Grande,0,3:37,Pop,,,Women of Pop,,,,,,,,,,,,,,,
112,1 - Warmup,So Close,"NOTD, Felix Jaehn & Captain Cuts feat. Georgia Ku",100,5:11,Pop,,,"Break-Up Songs, Easy to Learn",,,,,,,,,,,,,,,
112,2 - Squats,Starry Eyes (Steerner Remix),Young Bombs,128,5:43,EDM,,,Summer,,,,,,,,,,,,,,,
112,3 - Chest,Killer Queen,5 Seconds Of Summer,87,5:02,Rock,,,"Emo, Halloween, Break-Up Songs",,,,,,,,,,,,,,,
112,4 - Back,UCLA (Heimanu Remix),RL Grime feat. 24hrs,102,5:50,Hip-Hop,,,Beast Mode,,,,,,,,,,,,,,,
112,5 - Triceps,Hustle,P!nk,174,5:00,Pop,Hard,,"P!nk, Women of Pop, Hard",,,,,,,,,,,,,,,
112,6 - Biceps,Dies Irae,Apashe & Black Prez,120,5:39,Hip-Hop,,,"Halloween, Beast Mode",,,,,,,,,,,,,,,
112,7 - Lunges,Pica,"Deorro, Henry Fong & Elvis Crespo",170,5:41,Latin,,,,,,,,,,,,,,,,,,
112,8 - Shoulders,Do It Again,Steve Aoki & Alok,126,5:26,EDM,,,,,,,,,,,,,,,,,,
112,9 - Core,No New Friends,"LSD feat Sia, Diplo & Labrinth",77,2:59,Pop,,,Sing-Along,,,,,,,,,,,,,,,
112,10 - Cooldown,Miracle,Labrinth,0,3:55,Pop,,,,,,,,,,,,,,,,,,
113,1 - Warmup,When In Rome,Gattuso & Damon Sharpe,101,5:31,Pop,,,,,,,,,,,,,,,,,,
113,2 - Squats,It’s Gonna Be Alright (Netsky & t1r Remix),Jon Lemmon,126,5:25,EDM,,,,,,,,,,,,,,,,,,
113,3 - Chest,Hope For The Underrated Youth,YUNGBLUD,118,5:08,Rock,,,Emo,,,,,,,,,,,,,,,
113,4 - Back,Don’t Kill My High (Squalzz Remix),Lost Kings feat. Wiz Khalifa & Social House,128,5:45,EDM,,,Sing-Along,,,,,,,,,,,,,,,
113,5 - Triceps,Post Malone,Sam Feldt feat. RANI,220,5:40,Pop,,,,,,,,,,,,,,,,,,
113,6 - Biceps,Better As One,Toll Taken,118,4:48,Rock,,,,,,,,,,,,,,,,,,
113,7 - Lunges,When The Lights Go Down,DJ Snake,184,5:55,EDM,,,,,,,,,,,,,,,,,,
113,8 - Shoulders,It Goes Like,Afrojack,136,5:44,EDM,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
113,9 - Core,Mad Love,Mabel,60,2:54,Pop,,,Valentine's Day,,,,,,,,,,,,,,,
113,10 - Cooldown,The Greatest,SIX60,0,2:56,Pop,,,,,,,,,,,,,,,,,,
113,9 - Core,Take Me Home,Tamagotchii,60,2:54,EDM,,,,,,,,,,,,,,,,,,
114,1 - Warmup,This Groove (Codeko Remix),Oliver Heldens & LENNO,108,5:11,Pop,,,,,,,,,,,,,,,,,,
114,2 - Squats,Pin The Grenade,Blink-182,152,4:55,Rock,,,Emo,,,,,,,,,,,,,,,
114,3 - Chest,Wopbabalubop Bulapbub Boom,Kool Hertz,150,5:28,EDM,,,,,,,,,,,,,,,,,,
114,4 - Back,Your Gain,Swif7,122,5:02,EDM,,,,,,,,,,,,,,,,,,
114,5 - Triceps,Disco Inferno,50 Cent,102,5:36,Hip-Hop,,,Summer,,,,,,,,,,,,,,,
114,6 - Biceps,Like A Girl,Lizzo,170,4:59,Hip-Hop,,,"Women of Pop, Sing-Along",,,,,,,,,,,,,,,
114,7 - Lunges,Lay It Down,Carmada feat. Georgi Kay,204,4:58,EDM,,,,,,,,,,,,,,,,,,
114,8 - Shoulders,Azumba,Head Over Heels,144,5:17,EDM,,,,,,,,,,,,,,,,,,
114,9 - Core,Dance Monkey,Tones and I,92,3:34,Pop,,,"Sing-Along, New Year's Eve",,,,,,,,,,,,,,,
114,10 - Cooldown,Catching Feelings,Drax Project feat. Six60,0,3:44,Pop,,,,,,,,,,,,,,,,,,
115,1 - Warmup,Hold Me Close,Sam Feldt feat. Ella Henderson,95,5:25,Pop,,,,,,,,,,,,,,,,,,
115,2 - Squats,Green Light,Lady Bri,148,5:03,EDM,,,,,,,,,,,,,,,,,,
115,3 - Chest,Work,Apashe & Vo Williams,140,5:58,EDM,,,,,,,,,,,,,,,,,,
115,4 - Back,Another Way,Seven Lions feat. April Bender,106,5:57,EDM,,,,,,,,,,,,,,,,,,
115,5 - Triceps,Break My Heart,Dua Lipa,74,5:52,Pop,,,Women of Pop,,,,,,,,,,,,,,,
115,6 - Biceps,Skip Jump Stomp,Atomic Drum Assembly,116,4:50,EDM,,,,,,,,,,,,,,,,,,
115,7 - Lunges,Faith,Nurko & Dia Frampton,100,4:50,EDM,,,,,,,,,,,,,,,,,,
115,8 - Shoulders,I Can Flex,Brevis & Drama B,132,5:16,EDM,,,,,,,,,,,,,,,,,,
115,9 - Core,Wildflower,5 Seconds of Summer,72,3:46,Rock,,,"Emo, Summer",,,,,,,,,,,,,,,
115,10 - Cooldown,I Love You's,Hailee Steinfield,0,3:41,Pop,,,Valentine's Day,,,,,,,,,,,,,,,
116,1 - Warmup,Otherside,Jon Lemmon,93,5:00,Pop,,,,,,,,,,,,,,,,,,
116,2 - Squats,The Squat Song (Extended),MOTi & BODYWORX,125,5:12,EDM,,,,,,,,,,,,,,,,,,
116,3 - Chest,Whoppa,Tinie Tempah feat. Sofia Reyes & Farina,115,5:12,Hip-Hop,,,Sing-Along,,,,,,,,,,,,,,,
116,4 - Back,Lacrimosa,Apashe,117,5:27,EDM,,,"Halloween, Hard, Beast Mode",,,,,,,,,,,,,,,
116,5 - Triceps,Too Far Gone (Wild Cards Remix),Lost Kings feat. Anna Clendening,92,5:14,Pop,,,,,,,,,,,,,,,,,,
116,6 - Biceps,As Good As It Gets,Posthumous Halloumi,110,4:45,Pop,,,"Positive Vibes, Sing-Along",,,,,,,,,,,,,,,
116,7 - Lunges,Dhol Life,Wiwek feat. Suraj & Suren,172,4:53,EDM,,,,,,,,,,,,,,,,,,
116,8 - Shoulders,Rari,Swimnaked,105,5:38,EDM,,,,,,,,,,,,,,,,,,
116,9 - Core,Kadungdung,Kuenta I Tambu,65,2:50,Latin,,,,,,,,,,,,,,,,,,
116,10 - Cooldown,My Oasis,Sam Smith feat. Burna Boy,0,3:04,Pop,,,,,,,,,,,,,,,,,,
116,4 - Back,Bright,NOAM DEE,136,5:37,EDM,,,,,,,,,,,,,,,,,,
116,3 - Chest,Leyendas,Lu-Ni,115,5:12,EDM,,,,,,,,,,,,,,,,,,
117,1 - Warmup,Heaven On My Mind,Becky Hill & Sigala,96,4:52,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
117,2 - Squats,Nothing For Free,Pendulum,154,5:22,EDM,,,"Beast Mode, Break-Up Songs",,,,,,,,,,,,,,,
117,3 - Chest,I Hate How Much I Want You,"The Struts, Phil Collen & Joe Elliott",116,5:49,Rock,,,,,,,,,,,,,,,,,,
117,4 - Back,The Wolf And Cage,NAOM DEE,108,5:30,EDM,,,,,,,,,,,,,,,,,,
117,5 - Triceps,How You Like That,BLACKPINK,78,4:48,K-Pop,,,Beast Mode,,,,,,,,,,,,,,,
117,6 - Biceps,French Toast,FLOYD WONDER,106,4:46,Hip-Hop,,,,,,,,,,,,,,,,,,
117,7 - Lunges,I Want It,Yellow Claw & Wiwek,216,5:04,EDM,,,,,,,,,,,,,,,,,,
117,8 - Shoulders,The Movement,Kid Ink,111,5:38,Rock,,,Beast Mode,,,,,,,,,,,,,,,
117,9 - Core,Levitating,Dua Lipa feat. DaBaby,166,3:28,Pop,Hard,,"Women of Pop, Sing-Along, Hard",,,,,,,,,,,,,,,
117,10 - Cooldown,Diamonds,Sam Smith,0,3:37,Pop,,,,,,,,,,,,,,,,,,
118,1 - Warmup,"Bad At Being Alone (Jay Hardaway)
Remix)",Codeko,81,4:33,Pop,,,,,,,,,,,,,,,,,,
118,2 - Squats,Tell Me You Love Me (Matrix & Futurebound Remix),Demi Lovato,142,5:02,Pop,,,Women of Pop,,,,,,,,,,,,,,,
118,3 - Chest,This Is My World,Esterly feat. Austin Jenckes,146,6:01,Rock,,,,,,,,,,,,,,,,,,
118,4 - Back,Mula,Eliminate,114,5:59,EDM,,,,,,,,,,,,,,,,,,
118,5 - Triceps,Feeling Alive,Earl St. Clair,122,5:20,Pop,Hard,,"Positive Vibes, Hard",,,,,,,,,,,,,,,
118,6 - Biceps,Drip,Boombox Cartel & Dillon Francis feat. Desiigner,118,4:28,Hip-Hop,,,,,,,,,,,,,,,,,,
118,7 - Lunges,Dura,Daddy Yankee,157,5:48,Latin,Hard,,Hard,,,,,,,,,,,,,,,
118,8 - Shoulders,Winter is Coming,CloZee,100,5:33,EDM,,,,,,,,,,,,,,,,,,
118,9 - Core,Rotate,Becky G & Burna Boy,64,3:24,Pop,,,,,,,,,,,,,,,,,,
118,10 - Cooldown,Beautiful Mistake,Maroon 5 feat. Megan Thee Stallion,0,3:52,Pop,,,,,,,,,,,,,,,,,,
119,1 - Warmup,Imagine,Punctual,88,4:53,Pop,,,,,,,,,,,,,,,,,,
119,2 - Squats,All You Ever Wanted (Sub Focus Remix),Rag'n'Bone Man,148,6:15,EDM,,,,,,,,,,,,,,,,,,
119,3 - Chest,Come Alive,Pendulum,128,6:25,Rock,,,"Beast Mode, Halloween",,,,,,,,,,,,,,,
119,4 - Back,1000 Faces,Jason Ross & Dia Frampton,97,5:17,EDM,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
119,5 - Triceps,What's Up Danger,Blackway & Black Caviar,104,5:23,Hip-Hop,,,Halloween,,,,,,,,,,,,,,,
119,6 - Biceps,Boom! Shake The Room,DJ Jazzy Jeff & The Fresh Prince,136,4:48,Hip-Hop,,,"Positive Vibes, Sing-Along",,,,,,,,,,,,,,,
119,7 - Lunges,Girl With The Bat,Idris Elba feat. Shadow Boxxer,179,5:54,EDM,,,,,,,,,,,,,,,,,,
119,8 - Shoulders,Singularity,REMNANT.exe,158,5:11,EDM,,,Beast Mode,,,,,,,,,,,,,,,
119,9 - Core,Nobody Like You (Retrovision Flip),Landis,254,5:18,EDM,,,,,,,,,,,,,,,,,,
119,10 - Cooldown,Be Somebody,Dillion Francis feat. Evie Irie,0,2:49,Pop,,,,,,,,,,,,,,,,,,
120,1 - Warmup,Remember,Divvy Nation,67,4:56,Pop,,,,,,,,,,,,,,,,,,
120,2 - Squats,Alive,Dimension feat. Poppy Baskcomb,140,6:04,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
120,3 - Chest,Go Hard or Go Home,Wiz Khalifa & Iggy Azalea,109,4:58,Hip-Hop,,,Beast Mode,,,,,,,,,,,,,,,
120,4 - Back,Peace (Kaivon Remix),Alison Wonderland,93,5:06,EDM,,,Break-Up Songs,,,,,,,,,,,,,,,
120,5 - Triceps,By Your Side,Calvin Harris feat. Tom Grennan,115,4:55,EDM,,,"Positive Vibes, Easy to Learn",,,,,,,,,,,,,,,
120,6 - Biceps,Jungle,X-Ambassadors & Jamie N Commons,99,4:58,Rock,,,"Beast Mode, Easy to Learn",,,,,,,,,,,,,,,
120,7 - Lunges,Your Body,Valentino Khan x Nitti Gritti,148,4:59,EDM,,,,,,,,,,,,,,,,,,
120,8 - Shoulders,Come & Go,Juice WRLD & Marshmello,83,4:52,EDM,,,Sing-Along,,,,,,,,,,,,,,,
120,9 - Core,Gold (KYND Remix),Sebastian feat. Bright Sparks,98,4:53,Pop,,,Break-Up Songs,,,,,,,,,,,,,,,
120,10 - Cooldown,y r u far away,Jon Lemmon feat. MAREINBAD,0,3:17,Pop,,,,,,,,,,,,,,,,,,
121,1 - Warmup,Tokyo,3LAU feat. XIRA,75,5:14,Pop,,,,,,,,,,,,,,,,,,
121,2 - Squats,Downtown,Nice Enough feat. Ash,120,5:42,EDM,,,,,,,,,,,,,,,,,,
121,3 - Chest,Anita,Armin van Buuren & Timmy Trumpet,149,5:26,Latin,,,,,,,,,,,,,,,,,,
121,4 - Back,Aarena,ISOxo,101,5:45,EDM,Hard,,Hard,,,,,,,,,,,,,,,
121,5 - Triceps,MONTERO (Call Me By Your Name),Little Nas X,94,4:39,Hip-Hop,,,Sing-Along,,,,,,,,,,,,,,,
121,6 - Biceps,damn Right Pt. 2,AUDREY NUNA & DJ Snake,130,4:59,Hip-Hop,,,,,,,,,,,,,,,,,,
121,7 - Lunges,Follow Me,Wiwek,128,5:22,EDM,,,,,,,,,,,,,,,,,,
121,8 - Shoulders,Shake The Ground,NOAM DEE,100,5:43,EDM,,,,,,,,,,,,,,,,,,
121,9 - Core,Don't Go Yet,Trilobite Trilogy,170,4:38,Pop,,,,,,,,,,,,,,,,,,
121,10 - Cooldown,Moth To A Flame,Swedish House Mafia & The Weeknd,0,3:59,Pop,,,Sing-Along,,,,,,,,,,,,,,,
122,1 - Warmup,Not Alone,Codeko & April Bender,123,4:55,EDM,,,,,,,,,,,,,,,,,,
122,2 - Squats,BADBOY,Fas Fash,108,4:58,EDM,,,,,,,,,,,,,,,,,,
122,3 - Chest,edamame,bbno$ & Rich Brian,95,5:06,Hip-Hop,,,"Beast Mode, Hard",,,,,,,,,,,,,,,
122,4 - Back,U & Me (Baauer Remix),alt-J,112,5:39,EDM,,,,,,,,,,,,,,,,,,
122,5 - Triceps,Dirty Sexy Money,Chilli Larder,104,4:31,Pop,,,,,,,,,,,,,,,,,,
122,6 - Biceps,HUMBLE (Skrillex Remix),Kendrick Lamar,104,3:59,Hip-Hop,,,Beast Mode,,,,,,,,,,,,,,,
122,7 - Lunges,Holy Water,Galantis,176,4:35,Pop,,,Easy to Learn,,,,,,,,,,,,,,,
122,8 - Shoulders,GUD VIBRATIONS,NGHTMRE & SLANDER,119,5:25,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
122,9 - Core,Say Nothing,Flume feat. MAY-A,152,5:10,Pop,,,,,,,,,,,,,,,,,,
122,10 - Cooldown,Cool Again,Faraway Earthside,0,3:17,Pop,,,,,,,,,,,,,,,,,,
122,9 - Core,Going to the Party (Extended Mix),The Allergies feat. Lyrics Born,201,4:58,Hip-Hop,,,,,,,,,,,,,,,,,,
122,7 - Lunges,I've Found My Way,Hallman feat. ELWIN,176,4:35,Pop,,,Positive Vibes,,,,,,,,,,,,,,,
123,1 - Warmup,Run (Galantis & Misha K VIP Mix),Becky Hill & Galantis,77,4:33,Pop,,,Women of Pop,,,,,,,,,,,,,,,
123,2 - Squats,Watercolour,Chromium Chaos,112,5:09,EDM,,,,,,,,,,,,,,,,,,
123,3 - Chest,Clap Snap,Icona Pop,136,5:33,Pop,,Easy to Learn,"Women of Pop, Positive Vibes, Easy to Learn",,,,,,,,,,,,,,,
123,4 - Back,Flatline,Blanke feat. Calivania,118,5:26,EDM,,,,,,,,,,,,,,,,,,
123,5 - Triceps,Medicine,E-Jux,114,5:04,Pop,,,,,,,,,,,,,,,,,,
123,6 - Biceps,Bad Girls,M.I.A,93,5:15,Hip-Hop,Hard,,Hard,,,,,,,,,,,,,,,
123,7 - Lunges,The Way We Do This,Ape Drums feat. Busy Signal & Major,164,5:51,EDM,,,Beast Mode,,,,,,,,,,,,,,,
123,8 - Shoulders,Take Ü There,Jack Ü feat. Kiesza,100,4:57,EDM,,,,,,,,,,,,,,,,,,
123,9 - Core,Money Money,Molly Wolfes,72,4:02,Pop,,,,,,,,,,,,,,,,,,
123,10 - Cooldown,Sunday,Joy Oladokun,0,3:18,Pop,,,,,,,,,,,,,,,,,,
123,3 - Chest,Delicately Poised,Capital Theatre,85,5:41,Rock,,,,,,,,,,,,,,,,,,
124,1 - Warmup,Drive Away (RetroVision Remix),Krewella,106,5:13,Pop,,,Break-Up Songs,,,,,,,,,,,,,,,
124,2 - Squats,We've Got Us,Mecco,136,5:40,Pop,,,,,,,,,,,,,,,,,,
124,3 - Chest,Lonely Boy,The Black Keys,103,4:53,Rock,,,Break-Up Songs,,,,,,,,,,,,,,,
124,4 - Back,Won't Make A Sound,ARMNHMR & NURKO feat. Micah Martin,88,6:37,Rock,,,,,,,,,,,,,,,,,,
124,5 - Triceps,2 Be Loved (Am I Ready),Lizzo,106,5:17,Hip-Hop,,Easy to Learn,"Women of Pop, Valentine's Day, Easy to Learn",,,,,,,,,,,,,,,
124,6 - Biceps,Fancy (GTA Remix),Iggy Azalea feat. Charli XCX,91,4:17,Hip-Hop,,,,,,,,,,,,,,,,,,
124,7 - Lunges,Voodoo (Tiesto Remix),Badshah & J Balvin,108,4:53,Latin,,Easy to Learn,"Halloween, Easy to Learn, Beast Mode",,,,,,,,,,,,,,,
124,8 - Shoulders,Hunnid,Chino Casino,90,4:42,Hip-Hop,,,,,,,,,,,,,,,,,,
124,9 - Core,Now Is When I Need You,Goldfield,111,5:12,Pop,,,,,,,,,,,,,,,,,,
124,10 - Cooldown,LOL,Mabel,0,3:37,Pop,,,,,,,,,,,,,,,,,,
United,1 - Warmup,Better Off Without You,Becky Hill feat. Shift K3Y,98,5:19,Pop,,,"Women of Pop, Break-Up Songs",,,,,,,,,,,,,,,
United,2 - Squats,Oh My My,Summer Kennedy,124,5:35,Pop,,,"Women of Pop, Positive Vibes",,,,,,,,,,,,,,,
United,3 - Chest,Sway With Me,Ivory Stone,120,5:09,Hip-Hop,,,,,,,,,,,,,,,,,,
United,4 - Back,Pray,Egzod feat. RIELL,90,5:16,EDM,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
United,5 - Triceps,Stupid Love,Lady Gaga,94,5:18,Pop,,,"Women of Pop, Valentine's Day",,,,,,,,,,,,,,,
United,6 - Biceps,Billionaire,FLOYD WONDER,141,5:03,Hip-Hop,,,Easy to Learn,,,,,,,,,,,,,,,
United,7 - Lunges,Gold,Koven,144,5:06,Pop,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
United,8 - Shoulders,Break It Down,Big Dope P,112,5:01,EDM,,,,,,,,,,,,,,,,,,
United,9 - Core,Maldad,Steve Aoki & Maluma,46,2:52,Pop,,,Easy to Learn,,,,,,,,,,,,,,,
United,10 - Cooldown,Sanctuary,Welshly Arms,0,3:52,Rock,,,Positive Vibes,,,,,,,,,,,,,,,
125,1 - Warmup,My Feelings,Riggi & Piros x VENIICE with RANI,,4:54,Pop,,,,,,,,,,,,,,,,,,
125,2 - Squats,Big City Life,Luude & Mattafix,,5:04,Pop,,,,,,,,,,,,,,,,,,
125,3 - Chest,Pump It Louder,Tiesto & Black Eyed Peas,,5:22,EDM,,Easy to Learn,"Sing-Along, New Year's Eve, Easy to Learn",,,,,,,,,,,,,,,
125,4 - Back,My Feet Don’t Work No More,Splasher,,5:50,Rock,,,,,,,,,,,,,,,,,,
125,5 - Triceps,Worth It,Fifth Harmony feat. Kid Ink,,5:37,Pop,,Easy to Learn,"Women of Pop, Easy to Learn",,,,,,,,,,,,,,,
125,6 - Biceps,Drop It,K3rk,,5:17,Pop,,,,,,,,,,,,,,,,,,
125,7 - Lunges,Goin Up,Valentino Khan,,5:19,Pop,,,,,,,,,,,,,,,,,,
125,8 - Shoulders,Free,Shy Guys,,5:14,Pop,,,,,,,,,,,,,,,,,,
125,9 - Core,Tropicana,Boomdabash feat. Annalisa,,4:42,Latin,,,,,,,,,,,,,,,,,,
125,10 - Cooldown,Fantasy,Traiko,,4:06,Pop,,,Women of Pop,,,,,,,,,,,,,,,
126,1 - Warmup,about you (Felix Cartal Remix),NOTD feat. Nightly,,4:39,EDM,,,,,,,,,,,,,,,,,,
126,2 - Squats,La Bomba,Armin van Buuren & Blasterjaxx,,5:51,EDM,,,Beast Mode,,,,,,,,,,,,,,,
126,3 - Chest,Massive,Drake,,5:42,Hip-Hop,,,,,,,,,,,,,,,,,,
126,4 - Back,Scandalous (Hairitage Remix),Gryffin & Tinashe,,4:57,EDM,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
126,5 - Triceps,I'm Not Cool,HyunA,,4:51,K-Pop,,,,,,,,,,,,,,,,,,
126,6 - Biceps,Icon,Jaden,,4:51,Hip-Hop,,,,,,,,,,,,,,,,,,
126,7 - Lunges,Morenita,Blusek,,5:40,Pop,,,,,,,,,,,,,,,,,,
126,8 - Shoulders,Higher Ground,TNGHT,,5:31,Pop,,,,,,,,,,,,,,,,,,
126,9 - Core,Ghetto Rock,Friend Within,,4:52,Pop,,,,,,,,,,,,,,,,,,
126,10 - Cooldown,headlock,Tep No x Marshall X Lindsey Ray,,3:17,Pop,,,,,,,,,,,,,,,,,,
127,1 - Warmup,Don't Forget My Love (BURNS Remix),Diplo & Miguel,,5:37,EDM,,,,,,,,,,,,,,,,,,
127,2 - Squats,When I'm Gone (Curbi Remix),PEEKABOO feat. XAELO,,5:41,EDM,,,Break-Up Songs,,,,,,,,,,,,,,,
127,3 - Chest,GOKU,Jaden,,5:23,Hip-Hop,,,,,,,,,,,,,,,,,,
127,4 - Back,Anywhere,MRVLZ,,4:42,Pop,,,,,,,,,,,,,,,,,,
127,5 - Triceps,MIC Drop,Mast Boldface,,6:03,Pop,,,,,,,,,,,,,,,,,,
127,6 - Biceps,Mambo Salentino,Boomdabash feat. Alessandra Amoroso,,5:15,Pop,,,Easy to Learn,,,,,,,,,,,,,,,
127,7 - Lunges,17 (Extended Mix),MK,,6:09,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
127,8 - Shoulders,JSYK,Pauline Herr,,6:09,Pop,,,,,,,,,,,,,,,,,,
127,9 - Core,Guerrilla,Remi Wolf,,4:35,Pop,,,,,,,,,,,,,,,,,,
127,10 - Cooldown,6 ft.,Vindata,,4:18,Pop,,,,,,,,,,,,,,,,,,
128,1 - Warmup,Antidote,Audien & Codeko feat. JT Roach,,5:08,Pop,,,"Beast Mode, Positive Vibes",,,,,,,,,,,,,,,
128,2 - Squats,Dynamite (Dr Phunk Remix),"Nicky Romero, Mike Williams & Amba Shepherd",,6:02,EDM,,,Beast Mode,,,,,,,,,,,,,,,
128,3 - Chest,God is a Dancer (Cheyenne Giles & Knock2 Remix),Tiesto & Mabel,,5:19,EDM,,,Beast Mode,,,,,,,,,,,,,,,
128,4 - Back,Paranoid,Lux Holm & Glaceo,,4:58,Pop,Hard,,Hard,,,,,,,,,,,,,,,
128,5 - Triceps,Eat Your Man,Khansas,,6:21,Hip-Hop,,,,,,,,,,,,,,,,,,
128,6 - Biceps,Jacare,Hottica,,4:42,Latin,,,Easy to Learn,,,,,,,,,,,,,,,
128,7 - Lunges,How To Love (Boombox Cartel Remix),Cash Cash feat. Sofia Reyes,,5:23,EDM,,,Valentine's Day,,,,,,,,,,,,,,,
128,8 - Shoulders,Let You Go,Pauline Herr,,4:48,Pop,,,,,,,,,,,,,,,,,,
128,9 - Core,If Only I,Loud Luxury x Two Friends feat. Bebe Rexha,,4:11,Pop,,,Women of Pop,,,,,,,,,,,,,,,
128,10 - Cooldown,Low Again,Bobby Weaving,,5:12,Pop,,,,,,,,,,,,,,,,,,
129,1 - Warmup,Need Your Love,Felix Cartal & Karen Harding,,5:02,Pop,,,Valentine's Day,,,,,,,,,,,,,,,
129,2 - Squats,Roll With The Bass,Dan Aux,,6:21,EDM,Hard,,"New Year's Eve, Hard",,,,,,,,,,,,,,,
129,3 - Chest,Bun Up the Dance,Dillon Francis & Skrillex,,5:52,EDM,,,,,,,,,,,,,,,,,,
129,4 - Back,Whole Heart (BKAYE Remix),Gryffin & Bipolar Sunshine,,5:12,EDM,,,Positive Vibes,,,,,,,,,,,,,,,
129,5 - Triceps,Strictly 4 Tha,Moss & Example,,5:28,Hip-Hop,,,,,,,,,,,,,,,,,,
129,6 - Biceps,Rude Boy,Rihanna,,5:07,Hip-Hop,,,"Women of Pop, Sing-Along",,,,,,,,,,,,,,,
129,7 - Lunges,Free,"Dillon Francis, Alesso & Clementine Douglas",,4:51,EDM,,,,,,,,,,,,,,,,,,
129,8 - Shoulders,Asking (Tiesto Remix),Sonny Fodera & MK feat. Clementine Douglas,,5:42,EDM,,,Beast Mode,,,,,,,,,,,,,,,
129,9 - Core,MANIAC,Stray Kids,,4:56,K-Pop,,,Sing-Along,,,,,,,,,,,,,,,
129,10 - Cooldown,Water,Tyla,,5:04,Pop,,,,,,,,,,,,,,,,,,
130,1 - Warmup,Easy,3LAU feat. XIRA,,5:13,Pop,,,,,,,,,,,,,,,,,,
130,2 - Squats,Mr. Brightside,Arcando & Livingston Crain,,6:02,Rock,,,Sing-Along,,,,,,,,,,,,,,,
130,3 - Chest,BOTH (David Guetta & Seth Hills Remix),Tiesto,,5:25,EDM,,Easy to Learn,"Beast Mode, Easy to Learn",,,,,,,,,,,,,,,
130,4 - Back,Escape (Dan Aux Remix),Nice Enough,,5:08,EDM,,,,,,,,,,,,,,,,,,
130,5 - Triceps,Beggin',Chris Lake & Aluna,,6:01,Hip-Hop,,,,,,,,,,,,,,,,,,
130,6 - Biceps,MEGAVERSE,Stray Kids,,4:48,K-Pop,,,,,,,,,,,,,,,,,,
130,7 - Lunges,SPEAK up! (ISOxo Remix),Knock2,,5:12,EDM,Hard,,Hard,,,,,,,,,,,,,,,
130,8 - Shoulders,Where You Are,Yesssss,,5:48,Pop,,,,,,,,,,,,,,,,,,
130,9 - Core,La Tarde,Jude & Frank and AtcG,,5:14,Latin,,,,,,,,,,,,,,,,,,
130,10 - Cooldown,Saturn,SZA,,4:02,Pop,,,,,,,,,,,,,,,,,,
131,1 - Warmup,Maze,Punctual feat. PHIA,,4:35,Pop,,,,,,,,,,,,,,,,,,
131,2 - Squats,Blind Faith,Chase & Status feat. Liam Bailey,,6:09,EDM,,Easy to Learn,"Positive Vibes, Easy to Learn",,,,,,,,,,,,,,,
131,3 - Chest,Toxic (Phibes Remix),Songer,,5:29,Hip-Hop,,,,,,,,,,,,,,,,,,
131,4 - Back,These Words,Badger & Natasha Bedingfield,,2:11,Pop,,,Women of Pop,,,,,,,,,,,,,,,
131,5 - Triceps,Selecta,Chase & Status feat. Stefflon Don,,6:16,EDM,,Easy to Learn,"Beast Mode, Easy to Learn",,,,,,,,,,,,,,,
131,6 - Biceps,Drama,aespa,,4:23,K-Pop,,,,,,,,,,,,,,,,,,
131,7 - Lunges,Humo,"Dillon Francis, Good Times Ahead",,5:34,Latin,,,,,,,,,,,,,,,,,,
131,8 - Shoulders,Traces Of You (Luca Lush Remix),Nytrix,,5:28,EDM,,,Break-Up Songs,,,,,,,,,,,,,,,
131,9 - Core,Swish Swish (Valentino Khan Remix),Katy Perry feat. Nicki Minaj,,5:25,Pop,,,Women of Pop,,,,,,,,,,,,,,,
131,10 - Cooldown,Espresso,Sabrina Carpenter,,4:24,Pop,,,"Women of Pop, Sing-Along",,,,,,,,,,,,,,,
132,1 - Warmup,Shiver,Cleanhitterz,,5:48,EDM,,,,,,,,,,,,,,,,,,
132,2 - Squats,Convivium,Gabry Ponte & T-78 Trish Belt,,6:22,EDM,,Easy to Learn,"Beast Mode, Easy to Learn",,,,,,,,,,,,,,,
132,3 - Chest,Delilah (pull me out of this),Fred again..,,6:13,EDM,,,,,,,,,,,,,,,,,,
132,4 - Back,No Glory (LBLVNC Remix),Skan & Krale feat. M.I.M.E & Drama B,,5:45,EDM,,,,,,,,,,,,,,,,,,
132,5 - Triceps,When You Were Young (Calvin Harris Remix),The Killers,,5:09,Rock,,,,,,,,,,,,,,,,,,
132,6 - Biceps,Say Amen (Saturday Night) (Sweater Beats Remix),Panic! At The Disco,,4:51,Rock,,,Emo,,,,,,,,,,,,,,,
132,7 - Lunges,Droppin' Hot,Bingo Players x Firebeatz feat. Sonny Wilson,,4:41,Pop,,,,,,,,,,,,,,,,,,
132,8 - Shoulders,ZENLESS,"Tiesto, Lucas & Steve, Silent Child",,5:17,EDM,,Easy to Learn,Easy to Learn,,,,,,,,,,,,,,,
132,9 - Core,Time for Toms,Like Heart,,5:50,Latin,,,,,,,,,,,,,,,,,,
132,10 - Cooldown,Lose My Cool,Niko Walters feat. Will,,3:26,Pop,,,,,,,,,,,,,,,,,,
133,1 - Warmup,Another World,MEDUZA & HAYLA,,4:43,EDM,,,Easy to Learn,,,,,,,,,,,,,,,
133,2 - Squats,Sun Is Shining,Funkstar De Luxe x Fred V,,5:11,EDM,,,"Summer, Easy to Learn",,,,,,,,,,,,,,,
133,3 - Chest,Kill It,aespa,,5:20,K-Pop,,,Beast Mode,,,,,,,,,,,,,,,
133,4 - Back,SMACK TALK,"ISOxo, Knock2, RL Grime, ISOKNOCK",,5:25,EDM,,,Beast Mode,,,,,,,,,,,,,,,
133,5 - Triceps,Its ok I'm ok,Tate McRae,,5:00,Pop,,Easy to Learn,"Women of Pop, Break-Up Songs, Easy to Learn",,,,,,,,,,,,,,,
133,6 - Biceps,HOT TO GO!,Chappell Roan,,5:00,Pop,,,"Women of Pop, Sing-Along, Valentine's Day, Summer",,,,,,,,,,,,,,,
133,7 - Lunges,My My My,Promise Land x Skullwell,,5:17,EDM,Hard,,"Positive Vibes, Hard",,,,,,,,,,,,,,,
133,8 - Shoulders,In My Mind (Extended Mix),"Gabry Ponte, Giuseppe Ottaviani feat. Malou",,5:55,EDM,,,,,,,,,,,,,,,,,,
133,9 - Core,Candela,Sunlay,,5:00,Latin,,,,,,,,,,,,,,,,,,
133,10 - Cooldown,Rumble,Rag'n'Bone Man,,3:31,Pop,,,,,,,,,,,,,,,,,,
